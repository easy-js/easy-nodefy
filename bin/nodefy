#!/usr/bin/env node

// core
var fs = require('fs');

// 3rd party
var cli = require('commander');

// lib
var nodefy = require('../lib/nodefy');


/* -----------------------------------------------------------------------------
 * cli setup
 * ---------------------------------------------------------------------------*/

cli.version('0.2.0');
cli.description('convert AMD modules into node.js compatible modules.');
cli.usage('[options] [glob]');
cli.option('-o,--output <folder>', 'Output folder. If omitted it will output to stdout.');
cli.option('--verbose', 'Verbose output. Will log each processed file.');
cli.parse(process.argv);


/* -----------------------------------------------------------------------------
 * convertBatch
 * ---------------------------------------------------------------------------*/

/**
 * Convert batch.
 */
var convertBatch = function () {
  var glob = cli.args[0];

  nodefy.convertBatch(glob, {
    outputPath: cli.output
  }, onBatchCompelte);
};

/**
 * On complete, optional prints.
 */
var onBatchComplete = function (err, results) {
  // fail
  if (err) {
    throw err;
  }

  // if we did not write contents to file
  // print them in console
  if (!cli.output) {
    printContents(results);

  // else if verbose, print converted modules
  // in console
  } else if (cli.verbose) {
    printModules(results);
  }
};

/**
 * Print converted contents to console.
 */
var printContents = function (results) {
  results = results.map(function(r){
    return r.result;
  });

  console.log(results.join('\n'));
};

/**
 * Print converted module paths to console.
 */
var printModules = function () {
  results = results.map(function(r){
    return ' - '+ r.outputPath;
  });

  console.log('Converted modules:');
  console.log( results.join('\n') );
};


/* -----------------------------------------------------------------------------
 * convertData
 * ---------------------------------------------------------------------------*/

var buffer = '';

/**
 * Convert a stream of data.
 */
var convertData = function () {
  process.stdin.on('data', onData);
  process.stdin.on('end', onEnd);
  process.stdin.resume();
};

/**
 * On data add to buffer.
 */
var onData = function (data) {
  buffer += chunk;
};
  
/**
 * On stream complete, write to file or print contents
 * to console.
 */
var onEnd = function () {
  var result = nodefy.parse(buffer);

  return cli.output
    ? fs.writeFileSync(cli.output, result)
    : console.log(result);
};


/* -----------------------------------------------------------------------------
 * run
 * ---------------------------------------------------------------------------*/

return cli.args.length
  ? convertBatch()
  : convertData();